# .gitlab-ci-check-golang-unittests.yml
#
# This gitlab-ci template runs and publishes into codecov unit tests
# from a Go repository
#
# Add it to the project in hand through Gitlab's include functionality
#
# include:
#   - project: 'Northern.tech/Mender/mendertesting'
#     file: '.gitlab-ci-check-golang-unittests.yml'
#
# Requires the following variables set in the project CI/CD settings:
# CODECOV_TOKEN: Token from codecov.io for this repository
#

stages:
  - test
  - publish

test:unit:
  stage: test
  image: golang:1.13
  before_script:
    # Install code coverage tooling
    - go get -u github.com/axw/gocov/gocov
    - go get -u golang.org/x/tools/cmd/cover

    # Rename the branch we're on, so that it's not in the way for the
    # subsequent fetch. It's ok if this fails, it just means we're not on any
    # branch.
    - git branch -m temp-branch || true
    # Git trick: Fetch directly into our local branches instead of remote
    # branches.
    - git fetch origin 'refs/heads/*:refs/heads/*'
    # Get last remaining tags, if any.
    - git fetch --tags origin

    # Prepare GOPATH for the build
    - mkdir -p /go/src/github.com/mendersoftware
    - cp -r ${CI_PROJECT_DIR} /go/src/github.com/mendersoftware/${CI_PROJECT_NAME}
    - cd /go/src/github.com/mendersoftware/${CI_PROJECT_NAME}
  script:
    - go list ./... | grep -v vendor | xargs -n1 -I {} -P 4 go test -v -covermode=atomic -coverprofile=../../../{}/coverage.txt {} || exit $? ;
    - mkdir -p tests/unit-coverage && find . -name 'coverage.txt' -exec cp --parents {} ./tests/unit-coverage \;
    - tar -cvf ${CI_PROJECT_DIR}/unit-coverage.tar tests/unit-coverage
  artifacts:
    expire_in: 2w
    paths:
      - unit-coverage.tar

publish:tests:
  stage: publish
  image: alpine
  dependencies:
    - test:unit
  before_script:
    - apk add --no-cache bash curl findutils git
  script:
    - tar -xvf unit-coverage.tar
    - bash -c "bash <(curl -s https://codecov.io/bash) -Z -s ./tests/unit-coverage"

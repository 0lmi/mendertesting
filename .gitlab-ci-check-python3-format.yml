# .gitlab-ci-check-python3-format.yml
#
# This gitlab-ci file runs the Black code formatter https://github.com/psf/black
# on the Python3 code in the repository, and fails the pipeline if the code is
# not formatted according to standard Black formatting rules.
#
# Add it to the project in hand through Gitlab's include functionality
# 
# include:
#   - project: 'Northern.tech/Mender/mendertesting'
#     file: '.gitlab-ci-check-python3-format.yml'
#
# The formatter can be specified to only format Python code from specific
# directories. This is done through adding the directories to the
# 'FORMAT_DIRECTORIES' variable in a Gitlab file, whitespace separated if
# multiple. If left empty, no filter will be applied.
#
# Example 'gitlab-ci.yml' addition:
# variables:
#    FORMAT_PYTHON3_DIRECTORIES: "some/project/repository/to/be/formatted/"
#
# Some things to consider before including this file. The Black code formatter
# accepts a project-local configuration file
# (https://github.com/psf/black#pyprojecttoml). This enables project specific
# configuration of the Black tool.
#
# The only recommended parameter to specify is:
# * The Python version
#
# The configuration parameters available match the command-line paramaters as listed here:
#    https://github.com/psf/black#command-line-options
#
# Example 'pyproject.toml' file:
#
#[tool.black]
# target-version = ['py38'] # If the project is using Python version 3.8
# '''
#

stages:
  - test

test:check-python3-formatting:
  image: debian
  stage: test
  variables:
      BLACK_FORMATTER_VERSION: "19.10b0" # Hard-coded and unconfigurable
  before_script:
    # Install dependencies
    - apt-get update
    - apt-get install -yq python3 python3-pip git
    - pip3 install black==$BLACK_FORMATTER_VERSION
    # Rename the branch we're on, so that it's not in the way for the
    # subsequent fetch. It's ok if this fails, it just means we're not on any
    # branch.
    - git branch -m temp-branch || true
    # Git trick: Fetch directly into our local branches instead of remote
    # branches.
    - git fetch origin 'refs/heads/*:refs/heads/*'
    # Get last remaining tags, if any.
    - git fetch --tags origin
    - git clone http://github.com/mendersoftware/mendertesting /tmp/mendertesting
  script:
    # Check that the Python code is formattet
    - env /tmp/mendertesting/check_python_code_format

# .gitlab-ci-check-golang-dockerimage.yml
#
# This gitlab-ci template builds a Docker image assuming a single Dockerfile
# and publish it on Docker Hub
#
# It assumes a Dockerfile in the root of the repository.
#
# Add it to the project in hand through Gitlab's include functionality
#
# include:
#   - project: 'Northern.tech/Mender/mendertesting'
#     file: '.gitlab-ci-check-golang-dockerimage.yml'
#
# Requires the following variables set in the project CI/CD settings:
# DOCKER_HUB_USERNAME: Username for docker.io
# DOCKER_HUB_PASSWORD: Password for docker.io
#

stages:
  - build
  - publish

build:
  stage: build
  tags:
    - docker
  image: docker
  services:
    - docker:dind
  before_script:
    - export DOCKER_REPOSITORY="mendersoftware/${CI_PROJECT_NAME}"
    - export DOCKER_TAG=${CI_COMMIT_REF_SLUG:-master}
    - export SERVICE_IMAGE="$DOCKER_REPOSITORY:$DOCKER_TAG"
    - export COMMIT_TAG="$CI_COMMIT_REF_SLUG_$CI_COMMIT_SHA"
  script:
    - echo "building ${CI_PROJECT_NAME} for ${SERVICE_IMAGE}"
    - docker build -t $SERVICE_IMAGE .
    - docker save $SERVICE_IMAGE > image.tar
  artifacts:
    expire_in: 2w
    paths:
      - image.tar

publish:image:
  stage: publish
  only:
    - /^(master|[0-9]+\.[0-9]+\.x)$/
  tags:
    - docker
  image: docker
  services:
    - docker:dind
  dependencies:
    - build
  before_script:
    - export DOCKER_REPOSITORY="mendersoftware/${CI_PROJECT_NAME}"
    - export DOCKER_TAG=${CI_COMMIT_REF_SLUG:-master}
    - export SERVICE_IMAGE="$DOCKER_REPOSITORY:$DOCKER_TAG"
    - export COMMIT_TAG="$CI_COMMIT_REF_SLUG_$CI_COMMIT_SHA"
  script:
    - docker load -i image.tar
    - docker tag $SERVICE_IMAGE $DOCKER_REPOSITORY:$COMMIT_TAG
    - docker tag $SERVICE_IMAGE $DOCKER_REPOSITORY:$CI_COMMIT_REF_SLUG
    - echo -n $DOCKER_HUB_PASSWORD | docker login -u $DOCKER_HUB_USERNAME --password-stdin
    - docker push $DOCKER_REPOSITORY:$COMMIT_TAG
    - docker push $SERVICE_IMAGE
